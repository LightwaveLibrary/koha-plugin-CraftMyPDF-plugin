[% USE raw %]
[% USE HtmlTags %]
[% USE Koha %]
[% USE Asset %]
[% USE KohaDates %]
[% PROCESS 'i18n.inc' %]
[% SET footerjs = 1 %]
[% INCLUDE 'doc-head-open.inc' %]
<title>[% FILTER collapse %]
    [% t("CraftMyPDF Integration Configuration") | html %] &rsaquo;
    [% t("Koha") | html %]
[% END %]</title>
[% INCLUDE 'doc-head-close.inc' %]
<style>
    .template-select {
        display: inline-block !important;
        visibility: visible !important;
        min-width: 200px;
        padding: 5px;
        font-size: 14px;
        height: auto;
    }
    .fetch-templates-btn {
        margin-left: 10px;
        vertical-align: middle;
    }
    .fetch-templates-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    .template-container {
        display: flex;
        align-items: center;
    }
</style>
</head>
<body id="plugins_craftmypdf" class="plugins">
[% INCLUDE 'header.inc' %]
[% PROCESS 'about-team.inc' %]

[% WRAPPER 'sub-header.inc' %]
    [% WRAPPER breadcrumbs %]
        [% WRAPPER breadcrumb_item %]
            <a href="/cgi-bin/koha/plugins/plugins-home.pl">Plugins</a>
        [% END %]
        [% WRAPPER breadcrumb_item bc_active=1 %]
            <span>CraftMyPDF Integration Configuration</span>
        [% END %]
    [% END #/ WRAPPER breadcrumbs %]
[% END #/ WRAPPER sub-header.inc %]

<div id="doc3" class="main container-fluid">
    <h1>CraftMyPDF Integration Configuration</h1>

    <div class="page-section clearfix">
        <form method="post">
            [% INCLUDE 'csrf-token.inc' %]
            <input type="hidden" name="class" value="[% CLASS | html %]">
            <input type="hidden" name="method" value="[% METHOD | html %]">
            <input type="hidden" name="save" value="1">

            <fieldset class="rows">
                <legend>CraftMyPDF Settings</legend>
                <ol>
                    <li>
                        <label for="api_key" class="required">CraftMyPDF API Key:</label>
                        <input type="text" name="api_key" id="api_key" value="[% api_key | html %]" size="50" required>
                    </li>
                    <li>
                        <label for="delete_on_uninstall">Delete settings on uninstall:</label>
                        <input type="checkbox" name="delete_on_uninstall" id="delete_on_uninstall" [% IF delete_on_uninstall == '1' %]checked[% END %]>
                    </li>
                </ol>
            </fieldset>

            <fieldset class="rows">
                <legend>Reports Configuration</legend>
                <table id="reportTable" class="table">
                    <thead>
                        <tr>
                            <th class="required">Koha Report ID</th>
                            <th class="required">Template ID</th>
                            <th>Complex JSON?</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        [% IF configs.size %]
                            [% FOREACH c IN configs %]
                                <tr>
                                    <td><input type="text" name="report_id[]" value="[% c.report_id | html %]" required></td>
                                    <td>
                                        <div class="template-container">
                                            <select name="template_id[]" class="template-select" required>
                                                <option value="">Select a template</option>
                                                [% IF c.template_id %]
                                                    <option value="[% c.template_id | html %]" selected>[% c.template_id | html %]</option>
                                                [% END %]
                                            </select>
                                            <button type="button" class="btn btn-primary fetch-templates-btn" disabled>Fetch CraftMyPDF Templates</button>
                                        </div>
                                    </td>
                                    <td>
                                        <!-- Hidden input stores the value submitted to server; checkbox is purely UI and synced on submit -->
                                        <input type="hidden" name="complex_json[]" value="[% IF c.complex_json == '1' %]1[% ELSE %]0[% END %]">
                                        <label style="display:inline-flex;align-items:center;gap:6px;">
                                            <input type="checkbox" class="complex-json-checkbox" [% IF c.complex_json == '1' %]checked[% END %]>
                                            <a href="#" class="complex-json-help" style="color:#007bff;margin-left:4px;">What's This?</a>
                                        </label>
                                    </td>
                                    <td>
                                        <div style="display:flex;gap:6px;align-items:center;">
                                            <button type="button" class="btn btn-success activate-editor-btn">Activate PDF Editor</button>
                                            <button type="button" class="btn btn-warning deactivate-editor-btn" disabled>Deactivate PDF Editor</button>
                                            <button type="button" class="btn btn-danger" onclick="deleteRow(this)">Delete</button>
                                        </div>
                                    </td>
                                </tr>
                                <tr class="editor-iframe-row" style="display:none;">
                                    <td colspan="4" style="padding:0;border-top:0;">
                                        <div class="editor-iframe-container" style="width:100%;height:600px;display:none;">
                                            <iframe class="editor-iframe" style="width:100%;height:100%;border:0;" sandbox="allow-scripts allow-same-origin allow-forms allow-modals"></iframe>
                                        </div>
                                    </td>
                                </tr>
                            [% END %]
                        [% ELSE %]
                            <tr>
                                <td><input type="text" name="report_id[]" required></td>
                                <td>
                                    <div class="template-container">
                                        <select name="template_id[]" class="template-select" required>
                                            <option value="">Select a template</option>
                                        </select>
                                        <button type="button" class="btn btn-primary fetch-templates-btn" disabled>Fetch CraftMyPDF Templates</button>
                                    </div>
                                </td>
                                <td>
                                    <input type="hidden" name="complex_json[]" value="0">
                                    <label style="display:inline-flex;align-items:center;gap:6px;">
                                        <input type="checkbox" class="complex-json-checkbox">
                                        <a href="#" class="complex-json-help" style="color:#007bff;margin-left:4px;">What's This?</a>
                                    </label>
                                </td>
                                <td><button type="button" class="btn btn-danger" onclick="deleteRow(this)">Delete</button></td>
                            </tr>
                        [% END %]
                    </tbody>
                </table>
                <button type="button" class="btn btn-primary" onclick="addRow()">Add Row</button>
            </fieldset>

            <fieldset class="action">
                <button class="btn btn-primary" type="submit">Save configuration</button>
                <a href="/cgi-bin/koha/plugins/plugins-home.pl" class="btn btn-default">Cancel</a>
            </fieldset>
        </form>
    </div>
</div>
[% INCLUDE 'intranet-bottom.inc' %]
<script>
function addRow() {
    var table = document.getElementById('reportTable').getElementsByTagName('tbody')[0];
    var row = table.insertRow();
    row.innerHTML = `
        <td><input type="text" name="report_id[]" required></td>
        <td>
            <div class="template-container">
                <select name="template_id[]" class="template-select" required>
                    <option value="">Select a template</option>
                </select>
                <button type="button" class="btn btn-primary fetch-templates-btn" disabled>Fetch CraftMyPDF Templates</button>
            </div>
        </td>
        <td>
            <!-- Hidden input stores the value submitted to server; checkbox is purely UI and synced on submit -->
            <input type="hidden" name="complex_json[]" value="0">
            <label style="display:inline-flex;align-items:center;gap:6px;">
                <input type="checkbox" class="complex-json-checkbox">
                <a href="#" class="complex-json-help" style="color:#007bff;margin-left:4px;">What's This?</a>
            </label>
        </td>
        <td><button type="button" class="btn btn-danger" onclick="deleteRow(this)">Delete</button></td>
    `;
    bindFetchButton(row.querySelector('.fetch-templates-btn'));
}

function deleteRow(btn) {
    var row = btn.parentNode.parentNode;
    row.parentNode.removeChild(row);
}

function getCsrfToken() {
    var metaTag = document.querySelector('meta[name="csrf-token"]');
    return metaTag ? metaTag.getAttribute('content') : '';
}

function bindFetchButton(button) {
    var apiKeyInput = document.getElementById('api_key');
    var select = button.parentNode.querySelector('.template-select');

    // Update button state based on API key
    function updateButtonState() {
        var apiKey = apiKeyInput ? apiKeyInput.value.trim() : '';
        button.disabled = !apiKey;
        console.log('CraftMyPDF: Fetch button state updated, disabled:', button.disabled);
    }

    // Initial state and listen for API key changes
    updateButtonState();
    apiKeyInput.addEventListener('input', updateButtonState);

    button.addEventListener('click', function() {
        var apiKey = apiKeyInput ? apiKeyInput.value.trim() : '';
        if (!apiKey) {
            alert('Please enter a valid CraftMyPDF API key first.');
            console.log('CraftMyPDF: No API key provided');
            select.innerHTML = '<option value="">Select a template</option>';
            return;
        }

        button.disabled = true;
        select.disabled = true;
        select.innerHTML = '<option value="">Loading templates...</option>';
        console.log('CraftMyPDF: Fetching templates with API key: ' + apiKey.substring(0, 5) + '...');

        $.ajax({
            url: '/cgi-bin/koha/plugins/run.pl',
            type: 'POST',
            data: {
                class: 'Koha::Plugin::Com::LightwaveLibrary::CraftMyPDF',
                method: 'fetch_templates',
                api_key: apiKey,
                csrf_token: getCsrfToken()
            },
            dataType: 'json',
            success: function(data) {
                console.log('CraftMyPDF: Templates fetched for configuration: ', data);
                select.disabled = false;
                button.disabled = false;
                select.innerHTML = '<option value="">Select a template</option>';

                if (!data || !Array.isArray(data) || data.length === 0) {
                    console.warn('CraftMyPDF: No templates found or invalid response format:', data);
                    alert('No templates found.');
                    return;
                }

                try {
                    data.forEach(function(template) {
                        if (template.templateId && template.name) {
                            console.log('CraftMyPDF: Adding template:', template.name, template.templateId);
                            var option = document.createElement('option');
                            option.value = template.templateId;
                            option.text = template.name + ' (' + template.templateId + ')';
                            select.appendChild(option);
                        } else {
                            console.warn('CraftMyPDF: Skipping invalid template:', template);
                        }
                    });
                    console.log('CraftMyPDF: Dropdown populated with', data.length, 'templates');
                    // Force re-render
                    setTimeout(function() {
                        select.dispatchEvent(new Event('change'));
                        console.log('CraftMyPDF: Dropdown re-render triggered');
                    }, 100);
                } catch (e) {
                    console.error('CraftMyPDF: Error populating dropdown:', e);
                    alert('Error populating templates: ' + e.message);
                    select.innerHTML = '<option value="">Select a template</option>';
                    button.disabled = false;
                }
            },
            error: function(xhr, status, error) {
                console.error('CraftMyPDF: Failed to fetch templates: ', status, error, xhr.responseText);
                alert('Error fetching templates: ' + error);
                select.disabled = false;
                button.disabled = false;
                select.innerHTML = '<option value="">Select a template</option>';
            }
        });
    });
}

$(document).ready(function() {
    console.log('CraftMyPDF: Configuration page loaded');
    document.querySelectorAll('.fetch-templates-btn').forEach(function(button) {
        bindFetchButton(button);
    });
    // Bind help link clicks to show modal
    function bindHelpLinks() {
        document.querySelectorAll('.complex-json-help').forEach(function(link) {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                var modal = document.getElementById('complexJsonModal');
                if (modal) modal.style.display = 'block';
            });
        });
    }
    bindHelpLinks();
    // Ensure newly added rows also have help binding by observing tbody
    var tbody = document.getElementById('reportTable').getElementsByTagName('tbody')[0];
    var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(m) {
            bindHelpLinks();
        });
    });
    observer.observe(tbody, { childList: true });
});
// Modal close handling
document.addEventListener('click', function(e) {
    var modal = document.getElementById('complexJsonModal');
    if (!modal) return;
    if (e.target.classList && e.target.classList.contains('complex-json-close')) {
        modal.style.display = 'none';
    }
    // Close when clicking outside modal content
    if (e.target == modal) {
        modal.style.display = 'none';
    }
});

// Insert modal HTML
var modalHtml = `
<div id="complexJsonModal" style="display:none;position:fixed;z-index:9999;left:0;top:0;width:100%;height:100%;overflow:auto;background-color:rgba(0,0,0,0.4);">
  <div style="background-color:#fff;margin:10% auto;padding:20px;border:1px solid #888;width:80%;max-width:700px;border-radius:6px;">
    <h3>Complex JSON Reports</h3>
    <p>A Complex JSON report is typically designed in the Data tab and contains at least one child array embedded inside the main items array. When this box is checked the Koha report is expected to output a pure JSON body. The plugin will send that JSON body unchanged to the CraftMyPDF API and will not perform any CSV-to-table conversion routines.</p>
    <p>Use this when your SQL returns a JSON object/array structure (for example using MySQL JSON_OBJECT / JSON_ARRAYAGG) rather than CSV rows.</p>
    <p style="font-size:90%;color:#555;margin-top:1rem;">Example: an SQL that returns a top-level object with an "items" array where each item contains an "item_lines" child array.</p>
    <div style="text-align:right;margin-top:1rem;"><button class="btn btn-default complex-json-close">Close</button></div>
  </div>
</div>`;
document.body.insertAdjacentHTML('beforeend', modalHtml);

// Sync complex_json checkbox states to hidden inputs before form submit
document.querySelector('form').addEventListener('submit', function(e) {
    try {
        var rows = document.querySelectorAll('#reportTable tbody tr');
        rows.forEach(function(row) {
            var hidden = row.querySelector('input[type=hidden][name="complex_json[]"]');
            var checkbox = row.querySelector('.complex-json-checkbox');
            if (hidden && checkbox) {
                hidden.value = checkbox.checked ? '1' : '0';
            }
        });
    } catch (err) {
        console.error('CraftMyPDF: Failed to sync complex_json values before submit', err);
    }
});

// CraftMyPDF Editor activation/deactivation handlers
function findRowElements(btn) {
    var dataRow = btn.closest('tr');
    var iframeRow = dataRow.nextElementSibling && dataRow.nextElementSibling.classList.contains('editor-iframe-row') ? dataRow.nextElementSibling : null;
    var iframe = iframeRow ? iframeRow.querySelector('.editor-iframe') : null;
    var activateBtn = dataRow.querySelector('.activate-editor-btn');
    var deactivateBtn = dataRow.querySelector('.deactivate-editor-btn');
    var select = dataRow.querySelector('select[name="template_id[]"]');
    return { dataRow, iframeRow, iframe, activateBtn, deactivateBtn, select };
}

function showIframeRow(iframeRow) {
    if (!iframeRow) return;
    var container = iframeRow.querySelector('.editor-iframe-container');
    if (container) container.style.display = 'block';
    iframeRow.style.display = '';
}

function hideIframeRow(iframeRow) {
    if (!iframeRow) return;
    var container = iframeRow.querySelector('.editor-iframe-container');
    if (container) container.style.display = 'none';
    iframeRow.style.display = 'none';
}

function activateEditor(button) {
    var elems = findRowElements(button);
    if (!elems.select || !elems.select.value) {
        alert('Please select a template ID before activating the editor.');
        return;
    }
    var apiKey = document.getElementById('api_key').value.trim();
    if (!apiKey) {
        alert('Please enter your CraftMyPDF API key in the settings above.');
        return;
    }

    // Disable activate while working
    elems.activateBtn.disabled = true;
    elems.activateBtn.textContent = 'Activating...';

    var payload = {
        template_id: elems.select.value,
        expiration: 1440,
        canSave: true,
        canCreatePDF: true,
        canViewSettings: true,
        canPreview: true,
        canEditJSON: true,
        canShowHeader: true,
        backURL: window.location.href
    };

    console.log('CraftMyPDF: Creating editor session for template', elems.select.value);

    console.log('CraftMyPDF: Sending create session request with payload:', payload);
    $.ajax({
        url: '/cgi-bin/koha/plugins/run.pl',
        type: 'POST',
        data: {
            class: 'Koha::Plugin::Com::LightwaveLibrary::CraftMyPDF',
            method: 'create_editor_session',
            api_key: apiKey,
            payload: JSON.stringify(payload),
            csrf_token: getCsrfToken()
        },
        dataType: 'json',
        success: function(data) {
            console.log('CraftMyPDF: create session response', data);
            if (!data || !data.url || !data.token_uuid) {
                alert('Unexpected response from server creating editor session.');
                elems.activateBtn.disabled = false;
                elems.activateBtn.textContent = 'Activate PDF Editor';
                return;
            }

            // Store token on the dataRow for later deactivation
            elems.dataRow.dataset.tokenUuid = data.token_uuid;

            // Show iframe and set src to the provided URL
            if (elems.iframe) {
                elems.iframe.src = data.url;
                showIframeRow(elems.iframeRow);
                elems.iframeRow.querySelector('.editor-iframe-container').style.display = 'block';
            }

            elems.deactivateBtn.disabled = false;
            elems.activateBtn.disabled = true;
            elems.activateBtn.textContent = 'Activated';
        },
        error: function(xhr, status, err) {
            console.error('CraftMyPDF: create session failed', {
                status: status,
                error: err,
                responseText: xhr.responseText,
                statusCode: xhr.status
            });
            var errorMsg = '';
            try {
                var response = JSON.parse(xhr.responseText);
                errorMsg = response.error || response.body || err || status;
            } catch(e) {
                errorMsg = xhr.responseText || err || status;
            }
            alert('Failed to create editor session: ' + errorMsg);
            elems.activateBtn.disabled = false;
            elems.activateBtn.textContent = 'Activate PDF Editor';
        }
    });
}

function deactivateEditor(button) {
    var elems = findRowElements(button);
    var token = elems.dataRow ? elems.dataRow.dataset.tokenUuid : null;
    var apiKey = document.getElementById('api_key').value.trim();
    if (!token) {
        alert('No active editor session found for this row.');
        return;
    }

    elems.deactivateBtn.disabled = true;
    elems.deactivateBtn.textContent = 'Deactivating...';

    $.ajax({
        url: '/cgi-bin/koha/plugins/run.pl',
        type: 'POST',
        data: {
            class: 'Koha::Plugin::Com::LightwaveLibrary::CraftMyPDF',
            method: 'deactivate_editor_session',
            api_key: apiKey,
            token_uuid: token,
            csrf_token: getCsrfToken()
        },
        dataType: 'json',
        success: function(data) {
            console.log('CraftMyPDF: deactivate response', data);
            // Clear token and hide iframe
            delete elems.dataRow.dataset.tokenUuid;
            if (elems.iframe) {
                elems.iframe.src = 'about:blank';
                hideIframeRow(elems.iframeRow);
            }
            elems.deactivateBtn.disabled = true;
            elems.deactivateBtn.textContent = 'Deactivate PDF Editor';
            elems.activateBtn.disabled = false;
            elems.activateBtn.textContent = 'Activate PDF Editor';
        },
        error: function(xhr, status, err) {
            console.error('CraftMyPDF: deactivate failed', status, err, xhr.responseText);
            alert('Failed to deactivate editor session: ' + (err || status));
            elems.deactivateBtn.disabled = false;
            elems.deactivateBtn.textContent = 'Deactivate PDF Editor';
        }
    });
}

// Wire up existing rows' activate/deactivate buttons
function bindEditorButtons(root) {
    root = root || document;
    root.querySelectorAll('.activate-editor-btn').forEach(function(b) {
        if (b._bound) return; b._bound = true;
        b.addEventListener('click', function() { activateEditor(b); });
    });
    root.querySelectorAll('.deactivate-editor-btn').forEach(function(b) {
        if (b._bound) return; b._bound = true;
        b.addEventListener('click', function() { deactivateEditor(b); });
    });
}

// Update editor button enabled/disabled state based on presence of API key and template selection
function updateEditorButtonStateForRow(dataRow) {
    if (!dataRow) return;
    // skip iframe rows
    if (dataRow.classList && dataRow.classList.contains('editor-iframe-row')) return;
    var activateBtn = dataRow.querySelector('.activate-editor-btn');
    var deactivateBtn = dataRow.querySelector('.deactivate-editor-btn');
    var select = dataRow.querySelector('select[name="template_id[]"]');
    var apiKey = document.getElementById('api_key') ? document.getElementById('api_key').value.trim() : '';

    var hasApiKey = !!apiKey;
    var hasTemplate = !!(select && select.value);

    if (activateBtn) {
        // only enable activate when api key exists and a template is selected
        activateBtn.disabled = !(hasApiKey && hasTemplate);
    }
    if (deactivateBtn) {
        // deactivate should be disabled if no api key or there's no active token
        // but don't enable it automatically just because api key exists; existing flow sets it when activated
        if (!hasApiKey) deactivateBtn.disabled = true;
    }
}

function updateAllEditorButtonStates() {
    var tbody = document.getElementById('reportTable').getElementsByTagName('tbody')[0];
    if (!tbody) return;
    var rows = tbody.querySelectorAll('tr');
    rows.forEach(function(r) {
        updateEditorButtonStateForRow(r);
    });
}

function bindTemplateSelectListeners(root) {
    root = root || document;
    root.querySelectorAll('select[name="template_id[]"]').forEach(function(s) {
        if (s._tplBound) return; s._tplBound = true;
        s.addEventListener('change', function() {
            var row = s.closest('tr');
            updateEditorButtonStateForRow(row);
        });
    });
}

// Ensure newly added rows (via addRow) have buttons wired and insert iframe row after them
var origAddRow = window.addRow;
window.addRow = function() {
    origAddRow();
    // find last two rows (data row and iframe row) and wire buttons
    var tbody = document.getElementById('reportTable').getElementsByTagName('tbody')[0];
    var rows = tbody.querySelectorAll('tr');
    var lastDataRow = rows[rows.length - 1];
    // Insert iframe row after lastDataRow
    var iframeRow = document.createElement('tr');
    iframeRow.className = 'editor-iframe-row';
    iframeRow.style.display = 'none';
    iframeRow.innerHTML = '<td colspan="4" style="padding:0;border-top:0;"><div class="editor-iframe-container" style="width:100%;height:600px;display:none;"><iframe class="editor-iframe" style="width:100%;height:100%;border:0;" sandbox="allow-scripts allow-same-origin allow-forms allow-modals"></iframe></div></td>';
    if (lastDataRow && lastDataRow.parentNode) {
        lastDataRow.parentNode.insertBefore(iframeRow, lastDataRow.nextSibling);
        bindEditorButtons(lastDataRow.parentNode);
        bindTemplateSelectListeners(lastDataRow.parentNode);
        // update button states for the newly added row
        updateEditorButtonStateForRow(lastDataRow);
    }
    // Wire newly added fetch template button too
    var fetchBtn = lastDataRow.querySelector('.fetch-templates-btn');
    if (fetchBtn) bindFetchButton(fetchBtn);
}

// Bind on document ready
$(document).ready(function() {
    bindEditorButtons();
    bindTemplateSelectListeners();
    // ensure activate/deactivate buttons are disabled when no API key is present
    var apiKeyInput = document.getElementById('api_key');
    if (apiKeyInput) {
        apiKeyInput.addEventListener('input', function() {
            updateAllEditorButtonStates();
        });
    }
    // initial state
    updateAllEditorButtonStates();
});
</script>
</body>
</html>
